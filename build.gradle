group 'com.incarcloud'
version '2.1.27.1-SNAPSHOT'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        MAVEN_URL_PUTLIC = 'http://121.40.157.200:8044/content/groups/public/'
        MAVEN_URL_RELEASE = 'http://121.40.157.200:8044/content/repositories/releases/'
        MAVEN_URL_SNAPSHOTS = 'http://121.40.157.200:8044/content/repositories/snapshots/'
        MAVEN_AUTH_USERNAME = 'deployment'
        MAVEN_AUTH_PASSWORD = 'AskForAdminIfUpload'
    }

    repositories {
        maven {
            url "${MAVEN_URL_PUTLIC}"
            /*credentials {
                username = "${MAVEN_AUTH_USERNAME}"
                password = "${MAVEN_AUTH_PASSWORD}"
            }*/
        }
    }

    /*configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }*/

    buildscript {
        repositories {
            maven { url "http://121.40.157.200:8044/content/groups/public/" }
        }
    }

    compileJava {
        options.encoding = "utf-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    compileTestJava {
        options.encoding = "utf-8"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
        }
    }
}

dependencies {
    compile("com.incarcloud:rooster-shared:2.1.26-SNAPSHOT")

    compile("org.slf4j:slf4j-api:1.7.+")

    testCompile("junit:junit:4.+")
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${MAVEN_URL_RELEASE}") {
                authentication(userName: "${MAVEN_AUTH_USERNAME}", password: "${MAVEN_AUTH_PASSWORD}")
            }
            snapshotRepository(url: "${MAVEN_URL_SNAPSHOTS}") {
                authentication(userName: "${MAVEN_AUTH_USERNAME}", password: "${MAVEN_AUTH_PASSWORD}")
            }
            pom.project {
                name = '$project.name'
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

defaultTasks "assemble"